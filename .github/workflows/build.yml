name: Build binaries and container images

on: 
  push:
  workflow_dispatch: 
  schedule: [ cron: '0 4 * * *' ]

permissions:
  packages: write 
  contents: write 

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
      CC_aarch64_unknown_linux_musl: aarch64-linux-gnu-gcc
      CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER: arm-linux-gnueabihf-gcc
      CC_armv7_unknown_linux_musleabihf: arm-linux-gnueabihf-gcc
    outputs:
      commit: ${{ steps.meta.outputs.commit }}
      version: ${{ steps.meta.outputs.version }} 
      continue: ${{ steps.meta.outputs.continue }}
    strategy:
      fail-fast: true
      matrix:
        arch: [ amd64, arm32v7, arm64v8 ]
        include:
          - arch: amd64
            target: x86_64-unknown-linux-musl
            platform: linux/amd64
          - arch: arm32v7
            target: armv7-unknown-linux-musleabihf
            platform: linux/arm/v7
          - arch: arm64v8
            target: aarch64-unknown-linux-musl
            platform: linux/arm64
    steps:
      - uses: actions/checkout@v4
      
      - run: git clone --depth=1 https://github.com/redlib-org/redlib

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # This action's built-in cache setup expects the Cargo.toml 
          # to be at a specific unchangable location which won't work for
          # our setup. So we'll setup our own caching.
          cache: false 
          target: ${{ matrix.target }}
          
      - id: meta
        run: |
          cd redlib
          echo "continue=$(diff -u ../.last_commit <(git rev-parse --short HEAD) > /dev/null 2>&1 && echo false || echo true)" >> $GITHUB_OUTPUT
          echo "version=$(cargo metadata --format-version 1 --no-deps | jq .packages[0].version -r | sed 's/^/v/')" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - if: ${{ ( steps.meta.outputs.continue == 'true' ) && ( matrix.arch == 'amd64' ) }}
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools

      - if: ${{ ( steps.meta.outputs.continue == 'true' ) && ( matrix.arch == 'arm32v7' ) }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf musl-tools

      - if: ${{ ( steps.meta.outputs.continue == 'true' ) && ( matrix.arch == 'arm64v8' ) }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: actions/cache/restore@v4
        id: build-cache
        with:
          path: |
            /home/runner/.cargo
            /home/runner/work/redlib/redlib/redlib/target
          key: build-cache-matrix-${{ matrix.arch }}-${{ hashFiles('./redlib/Cargo.toml') }}

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        run: |
          cd redlib
          cargo build --release --target ${{ matrix.target }}

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            /home/runner/.cargo
            /home/runner/work/redlib/redlib/redlib/target
          key: ${{ steps.build-cache.outputs.cache-primary-key }}

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        run: tar czfv redlib-${{ matrix.target }}.tar.gz -C redlib/target/${{ matrix.target }}/release/ redlib

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: redlib-${{ matrix.target }}.tar.gz

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        run: cp -v redlib/target/${{ matrix.target }}/release/redlib ./redlib-bin

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: docker/setup-qemu-action@v3
  
      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: docker/setup-buildx-action@v3

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: docker/metadata-action@v5
        id: image-meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ matrix.arch }}-${{ steps.meta.outputs.version }},enable={{is_default_branch}}
            type=raw,value=${{ matrix.arch }}-${{ steps.meta.outputs.commit }},enable={{is_default_branch}}
            type=raw,value=${{ matrix.arch }},enable={{is_default_branch}}
      
      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: actions/cache/restore@v4
        id: image-cache
        with:
          path: .docker_cache
          # Not a fan of having to use the Dockerfile as a reference but as of the time of 
          # writing, GitHub doesn't allow us to update existing runner caches of the same name
          key: build-cache-matrix-${{ matrix.arch }}-${{ hashFiles('./redlib/Cargo.toml') }}

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.image-meta.outputs.tags }}
          context: .
          cache-to: type=local,dest=.docker_cache/
          cache-from: type=local,src=.docker_cache/
          platforms: ${{ matrix.platform }}

      - if: ${{ steps.meta.outputs.continue == 'true' }}
        uses: actions/cache/save@v4
        with:
          path: .docker_cache
          key: ${{ steps.image-cache.outputs.cache-primary-key }}

  merge:
    if: ${{ needs.build.outputs.continue == 'true' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      IMAGE: ghcr.io/${{ github.repository }}
      COMMIT: ${{ needs.build.outputs.commit }}
      VERSION: ${{ needs.build.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 } # Need history to push to repo

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - run: |
          docker buildx imagetools create \
            --tag ${IMAGE}:${COMMIT} ${IMAGE}:{amd64,arm32v7,arm64v8}-${COMMIT}
          docker buildx imagetools create \
            --tag ${IMAGE}:${VERSION} ${IMAGE}:{amd64,arm32v7,arm64v8}-${VERSION}
          docker buildx imagetools create \
            --tag ${IMAGE}:latest ${IMAGE}:{amd64,arm32v7,arm64v8}

      - run: |          
          OLD=$(cat .last_commit)
          NEW=${COMMIT}

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          echo "${NEW}" > .last_commit
          git add .last_commit
          git commit -m "Update .last_commit" -m "${OLD} >> ${NEW}"
          
          git status
          git push -u origin master